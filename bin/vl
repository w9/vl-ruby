#!/usr/bin/env ruby

begin

require 'optparse'
require 'colorize'
require 'csv'
require 'pp'

$options = {
  :padding => 1,
  :quote => '"',
  :skip => 0,
  :comment => /^#/,
  :probe_lines => 100,
  :justify => 'l',
  :alternate_color => false,
  :chop_length => 1024,
  :max_n_cols => 200,
  :return_char => ["\n", "\r", "\r\n"],
}



opts = OptionParser.new do |opts|
  opts.set_banner ''
  opts.set_summary_indent '    '
  opts.set_summary_width 28

  opts.separator '/==============================================================================\\'
  opts.separator ''
  opts.separator '  (' + 'V'.bold.blue + ')iew (' + 'L'.bold.yellow + ')arge table: lightning fast table formatter'
  opts.separator ''
  opts.separator '  output to stdout: ' + 'vl FILENAME [options]'.green
  opts.separator '  pipe to less: ' + 'vll FILENAME [options]'.green
  opts.separator ''
  opts.separator '  Options:'

  opts.on('-s', '--separator <REGEX>', 'char or string to match the separator [auto]') do |s|
    $options[:separator] = s
  end

  opts.on('-p', '--padding <INT>', 'number of spaces that separate the columns [1]') do |p|
    $options[:padding] = p.to_i
  end

  opts.on('-k', '--skip <INT>', 'number of top lines to skip [0]') do |k|
    $options[:skip] = k.to_i
  end

  opts.on('-g', '--probe-lines <INT>', 'number of top lines used for estimation [100]') do |p|
    $options[:probe_lines] = p.to_i
  end

  opts.on('-j', '--justify {l|r|a}', 'justification mode for cells (l/r/a) [l]') do |j|
    if ['l', 'r', 'a'].include?(j[0])
      $options[:justify] = j[0]
    else
      puts 'Warning: Unrecognized justify option.'
      puts "Warning: Default value \"#{$options[:justify]}\" is used"
    end
  end
          
  opts.on('-c', '--comment <REGEX>', 'regex to match lines to ignore [^#]') do |c|
    begin
      $options[:comment] = Regexp.new(c)
    rescue
      STDERR.puts 'Warning: Problems encountered when processing the regex.'
      STDERR.puts "Warning: Default value \"#{$options[:comment].source}\" is used."
    end
  end

  opts.on('-q', '--quote <CHAR>', 'character of quote ["]') do |q|
    $options[:quote] = q
  end

  opts.on('-z', '--[no-]alternative-color', 'use alternative colors [no]') do |c|
    $options[:alternate_color] = c
  end

  opts.on('-m', '--max-num-cols <INT>', 'the maximum number of columns to show [200]') do |m|
    $options[:max_n_cols] = m.to_i
  end

  opts.on('-l', '--chop-length <INT>', 'chop columns longer than this length [1024]') do |l|
    $options[:chop_length] = l.to_i
  end

  opts.separator ''
  opts.separator '\==============================================================================/'
  opts.separator ''
end

opts.parse!


if !$options[:separator]
  if ARGF.filename =~ /.*\.csv/
    $options[:separator] = ','
  else
    $options[:separator] = "\t"
  end
end

#------#
# Main #
#------#


#==== new version ===#

$cached_lines = []
$max_widths = []
$csv_options = {
  :col_sep    => $options[:separator],
  :quote_char => $options[:quote],
  :row_sep => $options[:return_char],
  #:skip_lines => $options[:comment]
}

def print_row(row)
  row.each_with_index do |c, i|
    break if i > $options[:max_n_cols]
    if i == $options[:max_n_cols] then
      print "... #{row.size - i} more columns"
      break
    end

    c = c[0..$options[:chop_length]]
    $max_widths[i] = [$options[:chop_length], $max_widths[i]].min

    case $options[:justify]
      when 'l'
        c = c.ljust($max_widths[i] + $options[:padding]) rescue break
      when 'r'
        c = c.rjust($max_widths[i] + $options[:padding]) rescue break
      when 'a'
        begin
          if Float(c) then c = c.rjust($max_widths[i] + $options[:padding]) end
        rescue
          c = c.ljust($max_widths[i] + $options[:padding])
        end
      end

    if $options[:alternate_color] then
      c = c.colorize([:yellow, :blue][i % 2])
    end

    print c
  end
  puts
rescue Errno::EPIPE => e
  STDERR.puts 'Pipe ended while writing.'
  abort
end

(1..1.0/0).each do |i|
  if ARGF.eof? then
    break
  end

  line = ARGF.readline

  if i < $options[:skip] or line =~ $options[:comment] then
    print line
    next
  end

  begin
    row = CSV.parse_line(line, $csv_options)
  rescue CSV::MalformedCSVError => e
    line = line + ARGF.readline
    if line.length < 10000 then
      retry
    else
      throw e
    end
  end

  row = row.map.with_index do |c, i|
    # damn you, 'csv' package!
    c = '' if c == nil
    c = c.inspect[1..-2]
    if $max_widths.fetch(i, -1) < c.length then $max_widths[i] = c.length end
    c
  end

  if i < $options[:probe_lines] then
    $cached_lines.push(row)
  else
    if $cached_lines.length > 0 then
      $cached_lines.each{|row|print_row(row)}
      $cached_lines = []
    end
    print_row(row)
  end
end

if $cached_lines.length > 0 then
  $cached_lines.each{|row|print_row(row)}
  $cached_lines = []
end


rescue Interrupt

end

